import java.util.ArrayList;

public class Main {
	public static void main(String args[]) {
		
		//Subsystem drivetrain = new Subsystem(60.0, 0, 6, 7.1); 
		//Elevator elevator = new Elevator(10.0, 0, 1, 10, 2); 
		//Drivetrain skrtMobile = new Drivetrain(110.0, 0, 4, 10.7, 6.0, 28.0);
		//System.out.println(elevator.simulate(12.0, 3.0));
		//System.out.println(skrtMobile.simulate(2.0, 3.0));
		//TrapezoidalTest test = new TrapezoidalTest(skrtMobile);
		
		//skrtMobile.generateProfile(120.0);
		//skrtMobile.executeProfile();
		
		Translation shift = new Translation(1.0, 0.0); //Translation move;
		Rotation r = new Rotation(Math.PI / 2);
		//move = shift.translateBy(shift);
		shift = shift.rotateBy(r);
//		System.out.println("Rotated shift: " + shift.toText());
		
//		System.out.println(shift.toText());
//		System.out.println(move.toText());
		
		DCMotorTransmission leftTransmission = new DCMotorTransmission(Constants.kv, Constants.kt, Constants.vIntercept, Constants.resistance, Constants.driveGearRatio, 2);
		DCMotorTransmission rightTransmission = new DCMotorTransmission(Constants.kv, Constants.kt, Constants.vIntercept, Constants.resistance, Constants.driveGearRatio, 2);
		
		DifferentialDrive diff = new DifferentialDrive(Constants.mass, Constants.wheelRadius, Constants.drivebaseWidth, Constants.angularInertia, leftTransmission, rightTransmission);
		
		double leftArc = 5.0;
		double rightArc = 10.0;
		
		RigidTransform first = diff.composeTransformFromArcs(.05, .10);
		RigidTransform second = diff.composeTransformFromArcs(.05, .05);
		
//		System.out.println(first.toText());
//		System.out.println(second.toText());
//		System.out.println(first.transformByDynamic(second).toText());
		
		
		
		double[] lefts = {0,0,0,0,0,0.009203884727,0,0,0,0,0,0,0,0,0,0,0,0,0,0.009203884727,0,0,0,0,0,0,0.009203884727,0,0.009203884727,0,0,0,0,0,0.009203884727,0,0,0.06442719309,0.06442719309,0.1196505015,0.2669126571,0.1564660404,0.1748738098,0.2761165418,0.1748738098,0.404970928,0.2853204265,0.4878058905,0.2116893487,0.303728196,0.2300971182,0.2945243113,0.3497476196,0.2485048876,0.2853204265,0.3129320807,0.3129320807,0.2945243113,0.3313398502,0.3129320807,0.3497476196,0.3313398502,0.303728196,0.3497476196,0.3221359655,0.3405437349,0.3681553891,0.3221359655,0.5706408531,1.316155516,0.4601942364,0.3405437349,0.303728196,0.3313398502,0.3129320807,0.303728196,0.3129320807,0.3313398502,0.3221359655,0.3681553891,0.2577087724,0.3497476196,0.2577087724,0.9664078964,0.3129320807,0.3221359655,0.3773592738,0.2853204265,0.2577087724,0.2853204265,0.2853204265,0.2945243113,0.2945243113,0.2853204265,0.2945243113,0.3405437349,0.2761165418,0.2945243113,0.3313398502,0.2945243113,0.3129320807,0.3129320807,0.303728196,0.3129320807,0.3129320807,0.303728196,0.303728196,0.2945243113,0.303728196,0.2945243113,0.3129320807,0.3129320807,0.3405437349,0.3497476196,0.3681553891,0.3497476196,0.3405437349,0.3313398502,0.3221359655,0.3405437349,0.3313398502,0.3405437349,0.3681553891,0.3221359655,0.3405437349,0.3865631585,0.3129320807,0.3129320807,0.3405437349,0.3221359655,0.3221359655,0.3313398502,0.3129320807,0.3129320807,0.3221359655,0.2577087724,0.2669126571,0.2669126571,0.607456392,0.202485464,0.2669126571,0.2761165418,0.3129320807,0.2761165418,0.303728196,0.303728196,0.3221359655,0.3405437349,0.2945243113,0.3313398502,0.3497476196,0.3129320807,0.3405437349,0.3405437349,0.303728196,0.3129320807,0.2945243113,0.2945243113,0.2853204265,0.3129320807,0.2853204265,0.2853204265,0.2945243113,0.2853204265,0.3773592738,0.2393010029,0.2577087724,0.303728196,0.3129320807,0.303728196,0.303728196,0.2945243113,0.303728196,0.2853204265,0.2669126571,0.2853204265,0.2669126571,0.2485048876,0.2761165418,0.2485048876,0.2669126571,0.202485464,0.2116893487,0.2116893487,0.2116893487,0.1748738098,0.202485464,0.1840776945,0.1932815793,0.1840776945,0.1748738098,0.1840776945,0.1748738098,0.1656699251,0.1748738098,0.1472621556,0.1472621556,0.1288543862,0.101242732,0.101242732,0.08283496255,0.06442719309,0.009203884727,0,0,0,0,0,0,0,0,0,-0.01840776945,-0.02761165418,-0.01840776945,-0.01840776945,-0.009203884727,-0.01840776945,-0.009203884727,0,-0.009203884727,0,0,0,0,0.009203884727,0,0.009203884727,0,0.009203884727};
		double[] rights = {0,0,0,0,0,0,0,0,0.009203884727,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.009203884727,0.009203884727,0.01840776945,0,0,0,0,0.009203884727,0.06442719309,0.1288543862,0.07363107782,0.1472621556,0.303728196,0.1840776945,0.202485464,0.3221359655,0.202485464,0.4786020058,0.3313398502,0.5982525073,0.2669126571,0.3865631585,0.2945243113,0.3589515044,0.4325825822,0.3129320807,0.3497476196,0.404970928,0.3957670433,0.3773592738,0.4141748127,0.404970928,0.4509903516,0.4509903516,0.404970928,0.4693981211,0.4141748127,0.4417864669,0.4970097753,0.4325825822,0.7547185476,1.767145868,0.6350680462,0.4970097753,0.4509903516,0.5246214295,0.4601942364,0.4786020058,0.4601942364,0.50621366,0.5154175447,0.5522330836,0.3865631585,0.5246214295,0.4325825822,1.426602133,0.4878058905,0.4878058905,0.5706408531,0.4786020058,0.4233786975,0.4693981211,0.50621366,0.4786020058,0.4786020058,0.4417864669,0.4601942364,0.5246214295,0.3957670433,0.4233786975,0.4601942364,0.404970928,0.4509903516,0.4325825822,0.4325825822,0.4693981211,0.4601942364,0.4509903516,0.4601942364,0.4509903516,0.4786020058,0.4970097753,0.4693981211,0.4786020058,0.4878058905,0.4786020058,0.5154175447,0.50621366,0.4970097753,0.4786020058,0.4693981211,0.50621366,0.4786020058,0.4693981211,0.5246214295,0.4786020058,0.4786020058,0.5338253142,0.4325825822,0.4325825822,0.4693981211,0.4233786975,0.4509903516,0.4141748127,0.4233786975,0.4325825822,0.4786020058,0.3865631585,0.3957670433,0.3773592738,0.9480001269,0.303728196,0.3957670433,0.3957670433,0.4417864669,0.3773592738,0.4325825822,0.4233786975,0.4141748127,0.4509903516,0.3865631585,0.4325825822,0.4970097753,0.4141748127,0.4601942364,0.4601942364,0.4417864669,0.4509903516,0.4509903516,0.4417864669,0.4509903516,0.4509903516,0.4141748127,0.4141748127,0.4141748127,0.3957670433,0.50621366,0.303728196,0.3405437349,0.3681553891,0.3497476196,0.3497476196,0.3221359655,0.3221359655,0.3221359655,0.303728196,0.2761165418,0.303728196,0.2761165418,0.2669126571,0.2853204265,0.2669126571,0.2761165418,0.2116893487,0.2300971182,0.2208932335,0.2208932335,0.1840776945,0.1932815793,0.1932815793,0.202485464,0.1840776945,0.1932815793,0.1748738098,0.1656699251,0.1656699251,0.1840776945,0.1472621556,0.1472621556,0.1380582709,0.1104466167,0.101242732,0.08283496255,0.06442719309,0,0,0,0,0,0,0,-0.009203884727,-0.01840776945,-0.02761165418,-0.02761165418,-0.01840776945,-0.02761165418,-0.01840776945,-0.009203884727,-0.01840776945,-0.009203884727,-0.009203884727,0,0,0,0,0,0.009203884727,0,0.009203884727,0,0.009203884727};
		
//		double[] lefts = {5,5,5,5};
//		double[] rights = {5,5,5,10};
		
		//ArrayList<RigidTransform> transformations = new ArrayList();
		
		RigidTransform currentPose = new RigidTransform(0,0,0);
		RigidTransform seg = new RigidTransform(0,0,0);
		System.out.println(currentPose.toText());
		
		for(int i = 0; i < lefts.length; i++) {
			seg = diff.composeTransformFromArcs(lefts[i], rights[i]);
			currentPose = currentPose.transformByDynamic(seg);
			System.out.println(currentPose.toText());
		}
		
		//System.out.println((diff.composeTransformFromArcs(leftArc, rightArc)).translation.x);
		//System.out.println((diff.composeTransformFromArcs(leftArc, rightArc)).translation.y);
		//System.out.println((diff.composeTransformFromArcs(leftArc, rightArc)).rotation.angle);
		
		//skrtMobile.generateTrapezoidalProfile(60.0);
		//skrtMobile.trapezoidalV2(17.0);
		//skrtMobile.executeTrapezoidalProfile(false);
		//skrtMobile.generatePointTurn(152.6);
		
		
		
	}
}
